{"version":3,"sources":["logo.svg","components/navbar.jsx","components/counter2.jsx","components/counters.jsx","App.js","reportWebVitals.js","index.js"],"names":["NavBar","totalCounters","className","href","Counter","this","getBadgeClass","props","counter","value","onClick","onIncrement","onDelete","id","classes","React","Component","Counters","onReset","counters","map","App","state","handleIncrement","index","indexOf","setState","handleReset","console","log","c","handleDelete","counterId","filter","Fragment","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wQAAe,I,aCkBAA,EAfA,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cACb,OACA,qBAAKC,UAAU,+BAAf,SACI,oBAAGA,UAAU,eAAeC,KAAK,IAAjC,mBACW,IACP,sBAAMD,UAAU,uCAAhB,SACCD,UCPPG,E,4JAEF,WAAU,IAAD,OAEL,OACA,gCAEI,sBAAMF,UAAWG,KAAKC,gBAAtB,SAAwCD,KAAKE,MAAMC,QAAQC,QAE3D,wBAAQC,QAAU,kBAAM,EAAKH,MAAMI,YAAY,EAAKJ,MAAMC,UAAUN,UAAY,wBAAhF,uBAEA,wBAAQQ,QAAU,kBAAM,EAAKH,MAAMK,SAAS,EAAKL,MAAMC,QAAQK,KAAKX,UAAU,wBAA9E,yB,2BAMR,WACI,IAAIY,EAAU,WAEb,OADAA,GAAsC,IAA3BT,KAAKE,MAAMC,QAAQC,MAAY,cAAgB,kB,GAnB7CM,IAAMC,WA+BbZ,IC9BTa,E,4JAEF,WACI,MAAmDZ,KAAKE,MAAjDW,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,SAAUP,EAA1B,EAA0BA,SAAUD,EAApC,EAAoCA,YACpC,OACA,gCACI,wBAAQD,QAAWQ,EAAShB,UAAY,sBAAxC,mBAEEiB,EAASC,KAAI,SAAAZ,GAAO,OAAI,cAAC,EAAD,CAE1BA,QAASA,EACTG,YAAaA,EACbC,SAAUA,GAHJJ,EAAQK,c,GATHE,IAAMC,WAoBdC,IChBTI,G,mNACJC,MAAM,CACJH,SAAS,CACL,CAACN,GAAG,EAAEJ,MAAM,GACZ,CAACI,GAAG,EAAEJ,MAAM,GACZ,CAACI,GAAG,EAAEJ,MAAM,GACZ,CAACI,GAAG,EAAEJ,MAAM,K,EAGlBc,gBAAkB,SAAAf,GAChB,IAAMW,EAAQ,YAAO,EAAKG,MAAMH,UAC1BK,EAAQL,EAASM,QAAQjB,GAC/BW,EAASK,GAAT,eAAsBhB,GACtBW,EAASK,GAAOf,QAChB,EAAKiB,SAAS,CAACP,c,EAEjBQ,YAAc,WACZC,QAAQC,IAAI,SACZ,IAAMV,EAAW,EAAKG,MAAMH,SAASC,KAAI,SAAAU,GAErC,OADAA,EAAErB,MAAQ,EACHqB,KAEX,EAAKJ,SAAS,CAACP,c,EAEjBY,aAAe,SAAAC,GACb,IAAMb,EAAW,EAAKG,MAAMH,SAASc,QAAQ,SAAAH,GAAC,OAAIA,EAAEjB,KAAOmB,KAE3D,EAAKN,SAAS,CAACP,c,4CAEnB,WACE,OACE,eAAC,IAAMe,SAAP,eACA,cAAC,EAAD,CAAQjC,cAAeI,KAAKiB,MAAMH,SAASgB,SAC3C,sBAAMjC,UAAU,YAAhB,SACE,cAAC,EAAD,CACEiB,SAAYd,KAAKiB,MAAMH,SACvBR,YAAaN,KAAKkB,gBAClBX,SAAUP,KAAK0B,aACfb,QAASb,KAAKsB,uB,GAtCJX,cA8CHK,ICzCAe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCGdQ,IAASC,OACP,eAAC,aAAD,WACE,cAAC,EAAD,IADF,QAGAC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.74f7b33a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\n\n//stateless functional componenet, cannot use lifecycel hooks here, only in Class\nconst NavBar = ({totalCounters}) =>{\n    return(\n    <nav className=\"navbar navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"#\">\n            Navbar{\" \"}\n            <span className=\"badge badge-pill badge-secondary m-2\">\n            {totalCounters}\n            </span>\n        </a>\n    </nav>\n    )\n\n}\n//class NavBar is removed \n\nexport default NavBar;","import React, { Component } from 'react';\n\nclass Counter extends React.Component {\n    \n    render() { \n         //key in counters will not be displayed, because it is identification\n        return (\n        <div>\n            \n            <span className={this.getBadgeClass()}>{this.props.counter.value}</span>\n            \n            <button onClick={ () => this.props.onIncrement(this.props.counter)} className = \"btn btn-secondary m-2\">Increment</button>\n            \n            <button onClick={ () => this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm\">Delete</button>\n            {/* {this.renderTags()}; */}\n        </div>\n        )\n    }\n\n    getBadgeClass(){\n        let classes = \"btn m-2 \";//space after '2'\n         classes+= (this.props.counter.value===0)? \"btn-primary\" : \"btn-warning\";\n         return classes;\n    }\n\n\n    // renderTags(){   //conditional rendering\n    //     if (this.state.tags.length===0) \n    //     return <p>\"no tags in the list\"</p>;\n    //     return <ul>{this.state.tags.map(tag =><li key={tag}>{ tag }</li>)}</ul>;\n    // }\n}\n \nexport default Counter;","import React, { Component } from 'react';\nimport Counter from './counter2'\n\nclass Counters extends React.Component {\n\n    render() { \n        const {onReset, counters, onDelete, onIncrement} = this.props;\n        return (\n        <div>\n            <button onClick = {onReset} className = \"btn btn-primary m-2\">Reset</button>\n\n            { counters.map(counter => <Counter \n            key= {counter.id} \n            counter={counter} \n            onIncrement={onIncrement} //bubbling to parent\n            onDelete={onDelete}\n            />)}</div> \n            //counter.value: passing data to component, replaced all atributes by counter={counter}\n        );\n    }\n    \n}\n \nexport default Counters;","import logo from './logo.svg';\nimport './App.css';\nimport NavBar from './components/navbar';\nimport Counters from './components/counters'\nimport React, { Component } from 'react';\nimport { render } from '@testing-library/react';\n\nclass App extends Component{\n  state={\n    counters:[\n        {id:1,value:0},\n        {id:2,value:0},\n        {id:3,value:0},\n        {id:4,value:2}\n    ]\n}\n  handleIncrement = counter =>{\n    const counters = [...this.state.counters]\n    const index = counters.indexOf(counter)\n    counters[index] = {...counter };\n    counters[index].value++;\n    this.setState({counters})        \n}\n  handleReset = () => {\n    console.log(\"check\");\n    const counters = this.state.counters.map(c => {\n        c.value = 0;\n        return c;\n    })\n    this.setState({counters});\n}\n  handleDelete = counterId =>{\n    const counters = this.state.counters.filter( c => c.id !== counterId); \n    // create new array with all id where id is not counterId\n    this.setState({counters}) //update new array\n};\nrender() {\n  return (\n    <React.Fragment> {/* return multiple root elements, needs wrap with React.Fragment,   */}\n    <NavBar totalCounters={this.state.counters.length} />\n    <main className=\"container\">\n      <Counters \n        counters= { this.state.counters}\n        onIncrement={this.handleIncrement}\n        onDelete={this.handleDelete}\n        onReset={this.handleReset}\n      />\n    </main>\n    </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css'\n// import Counter from './components/counter'\n// import Counter from './components/counter2'\nimport Counters from './components/counters'\n\nReactDOM.render(\n  <StrictMode>    \n    <App/>  {/* import from ./components/ first */}\n    </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}